security:
#  role_hierarchy:
#    ROLE_ADMIN: [ROLE_USER]
#
#  enable_authenticator_manager: true
#  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
#  password_hashers:
#    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
#    App\Entity\User:
#      algorithm: auto
#
#  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
#  providers:
#    # used to reload user from session & other features (e.g. switch_user)
#    app_user_provider:
#      id: App\Security\UserProvider

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
#    api:
#      pattern: ^/api/
#      stateless: true
#      provider: app_user_provider
#      jwt: ~
#    main:
#      stateless: true
#      provider: app_user_provider
#      json_login:
#        check_path: /authentication_token
#        username_path: email
#        password_path: password
#        success_handler: lexik_jwt_authentication.handler.authentication_success
#        failure_handler: lexik_jwt_authentication.handler.authentication_failure

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
    - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
    #- { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
===
$data['security']['providers'] = [
    'app_user_provider' => [
        'entity' => [
            'class' => 'App\Entity\User',
            'property' => 'email',
        ],
    ],
];
===
security:
#  role_hierarchy:
#    ROLE_ADMIN: [ROLE_USER]
#
#  enable_authenticator_manager: true
#  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
#  password_hashers:
#    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
#    App\Entity\User:
#      algorithm: auto
#
#  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
#  providers:
#    # used to reload user from session & other features (e.g. switch_user)
#    app_user_provider:
#      id: App\Security\UserProvider

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
#    api:
#      pattern: ^/api/
#      stateless: true
#      provider: app_user_provider
#      jwt: ~
#    main:
#      stateless: true
#      provider: app_user_provider
#      json_login:
#        check_path: /authentication_token
#        username_path: email
#        password_path: password
#        success_handler: lexik_jwt_authentication.handler.authentication_success
#        failure_handler: lexik_jwt_authentication.handler.authentication_failure

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
    - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
    #- { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon